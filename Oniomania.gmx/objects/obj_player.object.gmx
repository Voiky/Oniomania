<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init head and speed

// Player doesn't have animation when spawn (and still)
image_speed = 0;

// Making the player start facing bottom
image_angle -= 180;
direction -= 90;

// I separeted the head from the corpse because of depth issues
head = instance_create(x, y, obj_player_head);

// Test grabbing Point Collision
point = instance_create( x, y, obj_testing_point);

coll_y = 0;
coll_x = 0;
backward = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movements

if( ! ( keyboard_check( ord('Z') ) || keyboard_check( ord( 'S' ) ) ) ) {

    // Stop moving with motion loss
    if( speed &gt; 1 ) {
    
        speed -= 0.25;
    
    } else if ( speed &lt; -1 ) {
    
        speed += 0.25;
    
    } else {
        speed = 0;
    }
    
    // Stop moving animation
    image_speed = 0;
    image_index = 0;

} else {
    // Moving Fowards
    if( keyboard_check( ord('Z') ) ) {
    
        speed += 0.5;    
        motion_add( direction, speed );
        
    // Moving Backwards (Doesn't work yet #broken)
    } else if ( keyboard_check( ord('S') ) ) {
    
        old_direction = direction;
        
        if ( backward != direction - 180) {
            backward = direction;
            backward -= 180;
        }
        
        motion_set( backward, 3 );
    
        direction = old_direction;
    }
    
    // Walking animation
    if( image_speed == 0 ) {
        image_speed = 1;
    }

}
        
// Player rotation
if ( keyboard_check( ord( 'Q') ) ) {

    direction += 2;

} else if ( keyboard_check( ord('D') ) ) {

    direction -= 2;

}

// Updating sprite angle in function of the direction ( the -90 stands for the fact that I messed up sprites by making them facing top (90 degres))
image_angle = direction -90;
    
// Clamping speed
speed = clamp(speed, -4, 4);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grabing a box

while(direction &gt; 360 || direction &lt; -360) {
    if( direction &gt; 360 ) {
        direction -= 360;
    } else {
        direction += 360;
    }
    
}

    test= direction;
switch( floor( direction / 90 ) ){
    case 0: 
        coll_y = y - ( sqrt(power(34,2) - power( dcos(test) * 34, 2)));
        coll_x = x + ( sqrt(power(34,2) - power( dsin(test) * 34, 2))); break;
    
    case 1: 
        coll_y = y - ( sqrt(power(34,2) - power( dcos(test) * 34, 2)));
        coll_x = x - ( sqrt(power(34,2) - power( dsin(test) * 34, 2))); break;
        
    case 2: 
        coll_y = y + ( sqrt(power(34,2) - power( dcos(test) * 34, 2)));
        coll_x = x - ( sqrt(power(34,2) - power( dsin(test) * 34, 2))); break;
    
    default: 
        coll_y = y + ( sqrt(power(34,2) - power( dcos(test) * 34, 2)));
        coll_x = x + ( sqrt(power(34,2) - power( dsin(test) * 34, 2))); break;
}

point.x = coll_x;
point.y = coll_y;

if( collision_point(coll_x, coll_y, obj_box, 0, 1) != noone &amp;&amp; keyboard_check(vk_space)) {
    
    if( sprite_index != spr_player_holding ) { 
        sprite_index = spr_player_holding;
    }
    
    with(collision_point(coll_x, coll_y, obj_box, 0, 1)) {
        x = other.coll_x;
        y = other.coll_y;
    }
} else {
    if( sprite_index != spr_player ) { 
        sprite_index = spr_player;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Head
// Nothing much to see here, just moving the head according to player's position and angle
head.image_angle = image_angle;
head.x = x;
head.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw head
//draw_sprite_ext(spr_player_head, -1, x, y, 1, 1, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///text aff

draw_text(10,10,'coll_x : ' + string(coll_x - x));
draw_text(10,30,'coll_y : ' + string(coll_y - y));
draw_text(10,60,'together : ' + string(coll_y - y + coll_x - x));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
